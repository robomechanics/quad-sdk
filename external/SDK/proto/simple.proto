/**
 * Copyright (C) Ghost Robotics - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Avik De <avik@ghostrobotics.io>
 */
syntax = "proto3";

// For max_count on repeated fields, max_size on strings
import "nanopb.proto";


// 3-element vector inspired by geometry_msgs/Vector3
message Vector3 {
  float x                       = 1;//x component
  float y                       = 2;//y component
  float z                       = 3;//z component
}
// inspired by geometry_msgs/Quaternion
message Quaternion {
  float x                       = 1;//x component
  float y                       = 2;//y component
  float z                       = 3;//z component
  float w                       = 4;//w component
}
// inspired by geometry_msgs/Twist
message Twist {
  Vector3 linear                = 1;//linear velocity components
  Vector3 angular               = 2;//angular velocity components
}
// inspired by geometry_msgs/Pose
// NOTE we also use this for end effector coordinates for a limb
message Pose {
  Vector3 position              = 1;//linear position components (xyz)
  Quaternion orientation        = 2;//orientation component of pose
}
// Subset of ROS `sensor_msgs/Imu`.
message Imu {
  // To be supported in a future SDK release.
  Quaternion orientation        = 1;
  Vector3 angular_velocity      = 2; // Angular velocity in the body frame.
  Vector3 linear_acceleration   = 3; // Linear acceleration of the body in the body frame.
  // Roll, pitch, yaw in that order.
  Vector3 euler                 = 4;
  // Covariance
  repeated float orientation_covariance = 5 [(nanopb).max_count = 9]; // 3x3 P matrix.
  // Accelerometer covariance scalar (multiplied by Identity of size 3).
  float linear_acceleration_covariance = 6;
  // Gyro covariance scalar (multiplied by Identity of size 3).
  float angular_velocity_covariance = 7;
}
// Inspired by but different from ROS `sensor_msgs/JointState`
// 
// NOTE: this doesn't have arrays, array in RobotState; e.g. `joint[0].position`.
message JointState {
  float position                = 1;//rad
  float velocity                = 2;//rad/s
  float voltage                 = 3;//Volts
  float current                 = 4;//Amps
  float temperature             = 5;//C
  float torqueEst               = 6;//N-m
}
// Subset of ROS `sensor_msgs/BatteryState`
message BatteryState {
  float voltage                 = 1;//Volts
  float current                 = 2;//Amps
  float percentage              = 3;//between 0-1
  float mvoltage                = 4;//voltage from motor controllers
}
// Inspired by ROS `sensor_msgs/Joy`.
//
// Represents joystick input.
// Used by RC controllers, gamepad controllers, and the Android control app as well.
// Depending on if the MCU/computer is doing the gait control, it will convert Joy to BehaviorCmd.
message Joy {
  // Array of axes. Nominally axes 0 to 3 correspond to channels 1 to 4 in an RC remote: 
  // 0=right stick horizontal, 
  // 1=right stick vertical, 
  // 2=left stick vertical
  // 3=left stick horizontal.
  repeated float axes           = 1 [(nanopb).max_count = 4];
  // Array of buttons. Nominally, 
  // button 0 is for BehaviorCmd::id selecion;
  // button 1 is for 0=stop,1=start, 2+ is behavior-dependent (maps to BehaviorCmd::mode).
  repeated int32 buttons        = 2 [(nanopb).max_count = 10];
}

// Custom messages for GR ==================================================

// Motor type (for use when we need actual motor parameters)
enum MotorType
{
  U8_DD = 0;
  U10P_G7 = 1;
  U8II_G25 = 2;
  DXL_MX106 = 3;
  DCX32_GPX = 4;
  U8II_G30 = 5;
  U8Lite_150 = 6;
  U8Lite_150_G20 = 7;
  U8Lite_150_G25 = 8;
  U8Lite_150_G30 = 9;
  U8Lite_150_G18 = 10;
  U10P_100_G15 = 11;
  U8_100_G6 = 12;
  U8_100_G9 = 13;
  NIDEC_D77_G22 = 14;
  NIDEC_D77 = 15;
  NIDEC_D64_G19 = 16;
  MN601_170_G20 = 17;
  U10P_100_G16 = 18;
  U10P_100 = 19;
  A80_G6 = 20;
  A80_G12 = 21;
}
// Params attached to a motor (not needed for core SDK functions, but needed for model-based work)
message MotorModelParams
{
  float kE                = 1;//Back-EMF constant
  float kT                = 2;//Torque constant
  float kR                = 3;//Phase-phase resistance
  float kJv               = 4;//Joint viscous damping coefficient
  // If there is flux saturation, need a piecewise linear approx of current-torque relation
  // the _count parameter must be equal for them
  repeated float currents = 5 [ (nanopb).max_count = 10 ];
  repeated float torques  = 6 [ (nanopb).max_count = 10 ];
}
// Joint parameters. The user can modify these after calling init(), in order to:
// * change the driver type;
// * change the physical address;
// * change the gear ratio, direction, zero (confiugration of the motor in the robot);
// * change the motor parameters (for torque esimates).
message JointParams {
  // Actuator type enumeration (related more to the interfacing electronics)
  enum Type {
    GRBL      = 0;//PWM motor controller
    GRBLE     = 1;//EtherCAT motor controller
    RIGID     = 2;//Rigid joint (oxymoron, but useful)
    DXL_PWM   = 3;//Dynamixel with open-loop control (cannot mix with DXL_POS for now)
    DXL_POS   = 4;//Dynamixel with only position control (cannot mix with DXL_PWM for now)
  }
  // Actuator types
  Type type                     = 1;
  // underlying *physical* address (e.g. PWM port, ethercat ID). TODO mapping from logical
  uint32 address                = 2;
  // if no output encoder on the actuator
  float gearRatio               = 3;
  int32 direction               = 4;
  // Zero offset configured in software (to be deprecated)
  float zero                    = 5;
  // // Motor params configured in software (moved to MotorModelParamsm referenced through MotorType)
  // float Kt                      = 6;
  // float R                       = 7;
  // Motor type
  MotorType motorType           = 8;
}
// Limb parameters. The user can modify limb parameters after calling init(), such as changing the limb kinematics:
// * select a specific kinematics function by changing `type`;
// * change the kinematic parameters; or 
// * replace the forward kinematics function itself
// The kinematics *can be changed on the fly* (i.e. in Behavior and Peripheral updates).
//
// The user can also change which joints constitute this limb (this should not be changed after begin() in main())
message LimbParams {
  // Enum for prespecified limb types
  enum Type {
    SYMM5BAR_EXT_RAD = 0;// Minitaur symmetric 5-bar with extension in radians (sum of motor angles)
    SYMM5BAR_EXT_M   = 1;// Minitaur symemtric 5-bar with extension in meters
    PARA5BAR_EXT_RAD = 2;// 3DOF Parallel 5-bar with extension in radians (mean/diff coordinates)
    PARA5BAR_EXT_M   = 3;// 3DOF Parallel 5-bar with extension in meters
    PARA5BAR_CART    = 4;// 3DOF Parallel 5-bar with cartesian coordinates
    SERIAL_RR_POLAR  = 5;// 3DOF Serial RR for sagittal plane and abduction
  }
  // Prespecified limb type
  Type type                     = 1;
  // the interpretation of the kinematic params depends on the limb type
  repeated float kinParams      = 2 [(nanopb).max_count = 12];
  // For custom kinematics functions (no need to supply if type matches above). If this is non-zero, then "type" is ignored and this function (of FKFunType) is used for forward kinematics
  uint64 fkFun                  = 3;
  // Assign joints to limbs
  repeated uint32 jointInd      = 4 [(nanopb).max_count = 6];
  // Vector from COM to limb base (in body frame; should be a constant vector)
  Vector3 d                     = 5; 
}
// Joint command modes. NOTE not all of these may be available for all drivers
enum JointMode {
  OFF       = 0;//Disabled
  PWM       = 1;//PWM duty cycle (param in in [-1, 1])
  POSITION  = 2;//Stiff position control (param is position in radians)
  TORQUE    = 4;//Torque specification mode (param is in N-m)
  CURRENT   = 5;//Current mode (param is in A)
}

// To command a behavior (e.g. bound, walk)
message BehaviorCmd {
  // Select a different behavior (indexing AvailableBehaviors)
  uint32 id                     = 1;
  // Set desired velocity
  Twist twist                   = 2;
  // Set desired position (e.g. walk height, body orientation for looking)
  Pose pose                     = 3;
  // convention: mode ::BehaviorMode_STOP always means stop, mode ::BehaviorMode_RUN always means normal run, 
  // behaviors can add others. e.g. 2 may mean leap
  // this replaces "signals" from before
  // e.g. AvailableBehaviors returns ([0, 1], ['bound', 'walk'])
  // user sets id=0 to select bound (check RobotState.behaviorId to confirm)
  // user sets mode=1 to begin bounding (check RobotState.behaviorMode to confirm)
  uint32 mode                   = 4;
}
message BehaviorConfig {
  bool overTemperatureShutoff = 1; //  Enable or disable the safety shutoff heuristic. Leave on for a robot; can turn off for testing individual joints
  bool softStart = 2;     // Enable or disable the soft start init procedure
  bool fallRecovery = 3;  // Enable automatic fall recovery
  bool autopilot = 4;     // Automatically set robot driving commands (can use in sim)
  bool selfCheck = 5;     // Selfcheck on startup
  bool negativePowerShutoff = 6; // check for excessive negative power and shut off (could be due to miscalibrated joint)
}
message HardwareConfig {
  bool singleLegTest = 1; // convenient way to reconfigure limbs and joints for a single leg test without IMU
  uint32 versionOverride = 2; // Specify a robot version overriding EEPROM reading. Must be a uint8.
}

// Configuration struct available to the MCU or OBC (not for transmission); global pointer ::P.
// The user can change these parameters after calling init():
// * change `P->joints_count` to add a joint, up to 30;
// * for each joint, the JointParams can be modified (see JointParams help for details);
// * change the number of limbs in `P->limbs_count` up to ::MAX_LIMB_COUNT;
// * for each limb, change the LimbParams (see LimbParams help for details).
// @ingroup Messaging
message RobotParams {
  // Robot types
  enum Type {
    MINITAUR    = 0;// Minitaur original
    MINITAUR_E  = 1;// Minitaur with etherCAT
    NGR         = 2;// Vision
    SPIRIT      = 3;
  }
  // Robot types (defines morphology, limb kinematics, initializes default joint / limb configuration)
  Type type = 1;
  uint32 version = 2;
  uint32 startupDelay = 3; // [ms] extra time added to startup to wait for encoders etc.
  repeated JointParams joints   = 11 [(nanopb).max_count = 20];//Joint parameter array
  repeated LimbParams  limbs    = 12 [(nanopb).max_count = 4];//Limb parameter array
}

message RobotStatus
{
  enum Mode
  {
    RESET = 0;
    TMC_BIAS_SAMPLING = 1;
    KILLED_USER = 2;
    KILLED_IMU_ERROR = 3;
    KILLED_JOY_ERROR = 4;
    KILLED_MAVCMD = 5;
    KILLED_MOTOR_ERROR = 6;
    KILLED_INVERTED_ERROR = 7;
    FALL_RECOVERY = 8;
    SELF_CHECK = 9;
    SOFT_START = 10;
    BEHAVIOR = 11;
    KILLED_ETHERCAT_ERROR = 12;
  }
  uint32 imu = 1;
  float updateARate = 2;
  float behaviorRate = 3;
  uint32 updateATime = 4;
  uint32 behaviorTime = 5;
  Mode mode = 6; // indicates what is running (behavior, recovery, failure, etc.)
}

// Robot state sent from the robot to the user code; global pointer ::S.
// Some settable robot state is echoed back (cmdMode, behaviorMode, ...). Instead of a full request/reply RPC implementation, the computer/tablet app can check if this changed.
// @ingroup Messaging
message RobotData {
  Imu imu                       = 2;//IMU sensor readings
  BatteryState batt             = 3;//Battery sensor readings
  Joy joy                       = 4;//Readings from Joystick on the mainboard (RC, Serial, XBee, ...)
  // State estimate from proprioception/IMU
  Twist twist                   = 5;
  // Robot echoes back what behavior is selected
  uint32 behaviorId             = 8;
  // Robot echoes back its behavior mode (running, stopped, leaping, etc.)
  uint32 behaviorMode           = 9;
  // Current time in milliseconds
  uint32 millis                 = 11;
  // Diagnostic information
  RobotStatus status = 12;
  // Command the behavior (e.g. the computer sends twist commands to behaviors pre-programmed on the MCU)
  BehaviorCmd behaviorCmd       = 21;
}

// Will replace the commands with this (for now fixed 3 joints/limb), but can extend this easily
enum LimbCmdMode {
  LIMB_OFF = 0;
  LIMB_FORCE = 1;
  JOINT_CURRENT = 2;
  JOINT_TORQUE = 3;
  JOINT_POSITION_OVER_CURRENT = 4;
  JOINT_POSITION_OVER_TORQUE = 5;
}
message LimbCmd {
  uint32 mode = 1;
  repeated float feedforward = 2 [(nanopb).max_count = 3];
  repeated float kp = 3 [(nanopb).max_count = 3];
  repeated float kd = 4 [(nanopb).max_count = 3];
}

message LimbState {
  // joint stuff
  repeated float q = 1 [(nanopb).max_count = 3]; // joint position [unit]
  repeated float dq = 2 [(nanopb).max_count = 3]; // joint velocity [unit/s]
  repeated float current = 3 [(nanopb).max_count = 3]; // actual current [A]
  repeated float temperature = 4 [(nanopb).max_count = 3]; // [C]
  repeated float torqueEst = 5 [(nanopb).max_count = 3]; // [N-m]
  repeated float voltage = 6 [(nanopb).max_count = 3]; // [V]
  repeated float torqueExt = 7 [(nanopb).max_count = 3]; // Estimated external torque
  float kneeAng = 8; // knee link angle
  float dkneeAng_dkneeJoint = 9; // knee link w.r.t. knee joint
  repeated float currentCmd = 10 [(nanopb).max_count = 3]; // commanded current [A]
  // after kinematics
  repeated float position = 11 [(nanopb).max_count = 3]; // Cartesian position [m]
  repeated float velocity = 12 [(nanopb).max_count = 3]; // Cartesian velocity [m/s]
  repeated float Jac = 13 [(nanopb).max_count = 9]; // Jacobian row major
  // Debugging and other sensors
  // repeated float forceSensor = 21 [(nanopb).max_count = 3]; // [N] sensed external force (if available)
  repeated float qraw = 22 [(nanopb).max_count = 3]; // raw joint position before direction/zero [unit]
  // Status
  repeated uint32 status = 31 [(nanopb).max_count = 3]; // joint status
}

message RobotCmd {
  repeated LimbCmd limbs = 1 [(nanopb).max_count = 4];
}
message RobotState {
  repeated LimbState limbs = 1 [(nanopb).max_count = 4];
  repeated float diagnostics = 2 [(nanopb).max_count = 5];
}

// @}
