/* This file was automatically generated by CasADi.
   The CasADi copyright holders make no ownership claim of its contents. */
/* How to prefix internal symbols */
#ifdef CASADI_CODEGEN_PREFIX
  #define CASADI_NAMESPACE_CONCAT(NS, ID) _CASADI_NAMESPACE_CONCAT(NS, ID)
  #define _CASADI_NAMESPACE_CONCAT(NS, ID) NS ## ID
  #define CASADI_PREFIX(ID) CASADI_NAMESPACE_CONCAT(CODEGEN_PREFIX, ID)
#else
  #define CASADI_PREFIX(ID) eval_jac_g_leg_ ## ID
#endif

#include <math.h>

#ifndef casadi_real
#define casadi_real double
#endif

#ifndef casadi_int
#define casadi_int long long int
#endif

/* Add prefix to internal symbols */
#define casadi_f0 CASADI_PREFIX(f0)
#define casadi_s0 CASADI_PREFIX(s0)
#define casadi_s1 CASADI_PREFIX(s1)
#define casadi_s2 CASADI_PREFIX(s2)

/* Symbol visibility in DLLs */
#ifndef CASADI_SYMBOL_EXPORT
  #if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
    #if defined(STATIC_LINKED)
      #define CASADI_SYMBOL_EXPORT
    #else
      #define CASADI_SYMBOL_EXPORT __declspec(dllexport)
    #endif
  #elif defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
    #define CASADI_SYMBOL_EXPORT __attribute__ ((visibility ("default")))
  #else
    #define CASADI_SYMBOL_EXPORT
  #endif
#endif

static const casadi_int casadi_s0[40] = {36, 1, 0, 36, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35};
static const casadi_int casadi_s1[17] = {13, 1, 0, 13, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
static const casadi_int casadi_s2[191] = {28, 36, 0, 1, 2, 3, 8, 13, 16, 18, 20, 22, 26, 32, 38, 44, 50, 57, 63, 69, 76, 82, 88, 95, 101, 107, 114, 115, 116, 117, 122, 127, 130, 132, 134, 136, 140, 146, 152, 0, 1, 2, 3, 4, 5, 10, 11, 3, 4, 5, 9, 11, 5, 9, 10, 0, 6, 1, 7, 2, 8, 3, 9, 10, 11, 3, 4, 5, 9, 10, 11, 3, 4, 5, 9, 10, 11, 6, 9, 10, 11, 12, 13, 7, 9, 10, 11, 14, 15, 8, 9, 10, 12, 13, 14, 15, 6, 9, 10, 11, 16, 17, 7, 9, 10, 11, 18, 19, 8, 9, 10, 16, 17, 18, 19, 6, 9, 10, 11, 20, 21, 7, 9, 10, 11, 22, 23, 8, 9, 10, 20, 21, 22, 23, 6, 9, 10, 11, 24, 25, 7, 9, 10, 11, 26, 27, 8, 9, 10, 24, 25, 26, 27, 0, 1, 2, 3, 4, 5, 10, 11, 3, 4, 5, 9, 11, 5, 9, 10, 0, 6, 1, 7, 2, 8, 3, 9, 10, 11, 3, 4, 5, 9, 10, 11, 3, 4, 5, 9, 10, 11};

/* eval_jac_g_leg:(w[36],p[13])->(jac_g[28x36,152nz]) */
static int casadi_f0(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem) {
  casadi_real a0, a1, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a2, a20, a21, a22, a23, a24, a25, a26, a27, a28, a29, a3, a30, a31, a32, a33, a34, a35, a36, a37, a38, a39, a4, a40, a41, a42, a43, a44, a45, a46, a47, a48, a49, a5, a50, a51, a52, a53, a54, a55, a56, a57, a58, a59, a6, a60, a61, a62, a63, a64, a65, a66, a67, a68, a69, a7, a70, a71, a72, a73, a74, a75, a76, a77, a78, a79, a8, a80, a9;
  a0=arg[1]? arg[1][0] : 0;
  a1=(1./a0);
  a2=(-a1);
  if (res[0]!=0) res[0][0]=a2;
  a2=(1./a0);
  a3=(-a2);
  if (res[0]!=0) res[0][1]=a3;
  a3=(1./a0);
  a4=(-a3);
  if (res[0]!=0) res[0][2]=a4;
  a4=5.0000000000000000e-001;
  a5=arg[0]? arg[0][3] : 0;
  a6=arg[0]? arg[0][27] : 0;
  a5=(a5+a6);
  a6=2.;
  a5=(a5/a6);
  a7=sin(a5);
  a8=arg[0]? arg[0][11] : 0;
  a9=arg[0]? arg[0][35] : 0;
  a10=(a8+a9);
  a10=(a10/a6);
  a11=arg[0]? arg[0][4] : 0;
  a12=arg[0]? arg[0][28] : 0;
  a11=(a11+a12);
  a11=(a11/a6);
  a12=sin(a11);
  a13=cos(a11);
  a14=(a12/a13);
  a15=(a10*a14);
  a15=(a7*a15);
  a16=cos(a5);
  a17=arg[0]? arg[0][10] : 0;
  a18=arg[0]? arg[0][34] : 0;
  a19=(a17+a18);
  a19=(a19/a6);
  a20=(a12/a13);
  a21=(a19*a20);
  a21=(a16*a21);
  a15=(a15-a21);
  a15=(a4*a15);
  a21=(1./a0);
  a22=(a15-a21);
  if (res[0]!=0) res[0][3]=a22;
  a22=(a16*a10);
  a23=(a7*a19);
  a22=(a22+a23);
  a22=(a4*a22);
  if (res[0]!=0) res[0][4]=a22;
  a23=(a10/a13);
  a23=(a7*a23);
  a24=(a19/a13);
  a24=(a16*a24);
  a23=(a23-a24);
  a23=(a4*a23);
  if (res[0]!=0) res[0][5]=a23;
  a24=10436111951390940.;
  a25=-2.7755575615628910e-017;
  a26=arg[0]? arg[0][9] : 0;
  a27=arg[0]? arg[0][33] : 0;
  a28=(a26+a27);
  a28=(a28/a6);
  a29=(a25*a28);
  a30=(a24*a29);
  a31=(a19*a30);
  a32=-4.5029837439999998e-001;
  a9=(a9-a8);
  a8=(a9/a0);
  a8=(a32*a8);
  a31=(a31+a8);
  a31=(a16*a31);
  a8=12429190414834890.;
  a29=(a8*a29);
  a33=(a10*a29);
  a34=3.9497933439999999e-001;
  a18=(a18-a17);
  a17=(a18/a0);
  a17=(a34*a17);
  a33=(a33+a17);
  a33=(a7*a33);
  a31=(a31-a33);
  a31=(a4*a31);
  if (res[0]!=0) res[0][6]=a31;
  a33=-3.4497933440000000e-001;
  a17=(a28*a10);
  a35=(a17*a13);
  a35=(a33*a35);
  a18=(a18/a0);
  a18=(a34*a18);
  a36=(a13*a18);
  a35=(a35+a36);
  a16=(a16*a35);
  a35=(a28*a19);
  a36=2.8966029440000002e-001;
  a37=(a36*a13);
  a38=(a35*a37);
  a39=4.5029837439999998e-001;
  a9=(a9/a0);
  a9=(a39*a9);
  a40=(a13*a9);
  a38=(a38+a40);
  a7=(a7*a38);
  a16=(a16-a7);
  a16=(a4*a16);
  if (res[0]!=0) res[0][7]=a16;
  a7=cos(a11);
  a38=sin(a5);
  a40=(a19*a38);
  a41=(a40/a13);
  a5=cos(a5);
  a42=(a10*a5);
  a43=(a42/a13);
  a41=(a41+a43);
  a41=(a7*a41);
  a11=sin(a11);
  a43=(a28*a13);
  a42=(a42*a12);
  a43=(a43+a42);
  a40=(a40*a12);
  a43=(a43+a40);
  a43=(a43/a13);
  a43=(a43/a13);
  a40=(a28/a13);
  a43=(a43-a40);
  a43=(a11*a43);
  a41=(a41+a43);
  a41=(a4*a41);
  a41=(-a41);
  if (res[0]!=0) res[0][8]=a41;
  a43=(1./a0);
  a40=(-a43);
  if (res[0]!=0) res[0][9]=a40;
  a40=(a10*a5);
  a42=(a19*a38);
  a40=(a40+a42);
  a40=(a40/a13);
  a40=(a40/a13);
  a40=(a11*a40);
  a40=(a4*a40);
  a40=(-a40);
  if (res[0]!=0) res[0][10]=a40;
  a42=arg[1]? arg[1][11] : 0;
  a44=arg[0]? arg[0][21] : 0;
  a45=(a42*a44);
  a46=arg[1]? arg[1][10] : 0;
  a47=arg[0]? arg[0][22] : 0;
  a48=(a46*a47);
  a45=(a45-a48);
  a48=arg[1]? arg[1][7] : 0;
  a49=arg[0]? arg[0][19] : 0;
  a50=(a48*a49);
  a45=(a45-a50);
  a50=arg[1]? arg[1][8] : 0;
  a51=arg[0]? arg[0][18] : 0;
  a52=(a50*a51);
  a45=(a45+a52);
  a52=arg[1]? arg[1][4] : 0;
  a53=arg[0]? arg[0][16] : 0;
  a54=(a52*a53);
  a45=(a45-a54);
  a54=arg[1]? arg[1][5] : 0;
  a55=arg[0]? arg[0][15] : 0;
  a56=(a54*a55);
  a45=(a45+a56);
  a56=arg[1]? arg[1][2] : 0;
  a57=arg[0]? arg[0][12] : 0;
  a58=(a56*a57);
  a45=(a45+a58);
  a58=arg[1]? arg[1][1] : 0;
  a59=arg[0]? arg[0][13] : 0;
  a60=(a58*a59);
  a45=(a45-a60);
  a45=(a7*a45);
  a60=arg[0]? arg[0][5] : 0;
  a61=arg[0]? arg[0][29] : 0;
  a60=(a60+a61);
  a60=(a60/a6);
  a6=cos(a60);
  a61=(a42*a6);
  a62=sin(a60);
  a63=(a46*a62);
  a61=(a61-a63);
  a63=arg[0]? arg[0][23] : 0;
  a64=(a61*a63);
  a65=arg[1]? arg[1][12] : 0;
  a66=(a6*a47);
  a66=(a65*a66);
  a64=(a64-a66);
  a66=(a62*a44);
  a66=(a65*a66);
  a64=(a64+a66);
  a66=(a50*a6);
  a67=(a48*a62);
  a66=(a66-a67);
  a67=arg[0]? arg[0][20] : 0;
  a68=(a66*a67);
  a64=(a64+a68);
  a68=arg[1]? arg[1][9] : 0;
  a69=(a6*a49);
  a69=(a68*a69);
  a64=(a64-a69);
  a69=(a62*a51);
  a69=(a68*a69);
  a64=(a64+a69);
  a69=(a54*a6);
  a70=(a52*a62);
  a69=(a69-a70);
  a70=arg[0]? arg[0][17] : 0;
  a71=(a69*a70);
  a64=(a64+a71);
  a71=arg[1]? arg[1][6] : 0;
  a72=(a6*a53);
  a72=(a71*a72);
  a64=(a64-a72);
  a72=(a62*a55);
  a72=(a71*a72);
  a64=(a64+a72);
  a72=(a56*a6);
  a73=(a58*a62);
  a72=(a72-a73);
  a73=arg[0]? arg[0][14] : 0;
  a74=(a72*a73);
  a64=(a64+a74);
  a74=arg[1]? arg[1][3] : 0;
  a75=(a62*a57);
  a75=(a74*a75);
  a64=(a64+a75);
  a75=(a6*a59);
  a75=(a74*a75);
  a64=(a64-a75);
  a64=(a11*a64);
  a45=(a45-a64);
  a45=(a4*a45);
  if (res[0]!=0) res[0][11]=a45;
  a64=-5.5319039999999993e-002;
  a75=(a19*a10);
  a75=(a64*a75);
  a76=-1.0531904000000000e-001;
  a27=(a27-a26);
  a27=(a27/a0);
  a27=(a76*a27);
  a75=(a75+a27);
  a7=(a7*a75);
  a33=(a33*a38);
  a17=(a17*a33);
  a35=(a35*a5);
  a36=(a36*a35);
  a17=(a17+a36);
  a9=(a5*a9);
  a17=(a17+a9);
  a18=(a38*a18);
  a17=(a17+a18);
  a11=(a11*a17);
  a7=(a7-a11);
  a7=(a4*a7);
  if (res[0]!=0) res[0][12]=a7;
  a11=(1./a0);
  a17=(-a11);
  if (res[0]!=0) res[0][13]=a17;
  a17=cos(a60);
  a18=(a65*a13);
  a9=(a18*a44);
  a36=(a13*a63);
  a35=(a46*a36);
  a9=(a9-a35);
  a35=(a13*a67);
  a75=(a48*a35);
  a9=(a9-a75);
  a75=(a68*a13);
  a27=(a75*a51);
  a9=(a9+a27);
  a27=(a13*a70);
  a26=(a52*a27);
  a9=(a9-a26);
  a26=(a71*a13);
  a77=(a26*a55);
  a9=(a9+a77);
  a77=(a13*a73);
  a78=(a58*a77);
  a9=(a9-a78);
  a78=(a74*a13);
  a79=(a78*a57);
  a9=(a9+a79);
  a9=(a17*a9);
  a60=sin(a60);
  a36=(a42*a36);
  a79=(a65*a13);
  a80=(a79*a47);
  a36=(a36-a80);
  a35=(a50*a35);
  a36=(a36+a35);
  a35=(a68*a13);
  a80=(a35*a49);
  a36=(a36-a80);
  a27=(a54*a27);
  a36=(a36+a27);
  a27=(a71*a13);
  a80=(a27*a53);
  a36=(a36-a80);
  a77=(a56*a77);
  a36=(a36+a77);
  a77=(a74*a13);
  a80=(a77*a59);
  a36=(a36-a80);
  a36=(a60*a36);
  a9=(a9-a36);
  a9=(a4*a9);
  if (res[0]!=0) res[0][14]=a9;
  a47=(a65*a47);
  a36=(a42*a63);
  a47=(a47-a36);
  a36=(a50*a67);
  a47=(a47-a36);
  a49=(a68*a49);
  a47=(a47+a49);
  a49=(a54*a70);
  a47=(a47-a49);
  a53=(a71*a53);
  a47=(a47+a53);
  a59=(a74*a59);
  a47=(a47+a59);
  a59=(a56*a73);
  a47=(a47-a59);
  a17=(a17*a47);
  a44=(a65*a44);
  a63=(a46*a63);
  a44=(a44-a63);
  a67=(a48*a67);
  a44=(a44-a67);
  a51=(a68*a51);
  a44=(a44+a51);
  a70=(a52*a70);
  a44=(a44-a70);
  a55=(a71*a55);
  a44=(a44+a55);
  a57=(a74*a57);
  a44=(a44+a57);
  a73=(a58*a73);
  a44=(a44-a73);
  a60=(a60*a44);
  a17=(a17-a60);
  a17=(a4*a17);
  if (res[0]!=0) res[0][15]=a17;
  a60=-5.0000000000000000e-001;
  if (res[0]!=0) res[0][16]=a60;
  a44=1.1510000000000000e+001;
  a73=(a44/a0);
  a57=(-a73);
  if (res[0]!=0) res[0][17]=a57;
  if (res[0]!=0) res[0][18]=a60;
  a57=(a44/a0);
  a55=(-a57);
  if (res[0]!=0) res[0][19]=a55;
  if (res[0]!=0) res[0][20]=a60;
  a44=(a44/a0);
  a55=(-a44);
  if (res[0]!=0) res[0][21]=a55;
  if (res[0]!=0) res[0][22]=a60;
  a55=1.0531904000000000e-001;
  a55=(a55/a0);
  a70=(-a55);
  if (res[0]!=0) res[0][23]=a70;
  a70=(a10*a5);
  a8=(a8*a70);
  a70=(a19*a38);
  a24=(a24*a70);
  a8=(a8+a24);
  a25=(a25*a8);
  a25=(a4*a25);
  if (res[0]!=0) res[0][24]=a25;
  a33=(a13*a33);
  a8=(a10*a33);
  a37=(a5*a37);
  a24=(a19*a37);
  a8=(a8+a24);
  a8=(a4*a8);
  a76=(a76*a12);
  a76=(a76/a0);
  a24=(a8-a76);
  if (res[0]!=0) res[0][25]=a24;
  a20=(a38*a20);
  a20=(a4*a20);
  a20=(-a20);
  if (res[0]!=0) res[0][26]=a20;
  a24=(a4*a5);
  a24=(-a24);
  if (res[0]!=0) res[0][27]=a24;
  a70=(a38/a13);
  a70=(a4*a70);
  a70=(-a70);
  if (res[0]!=0) res[0][28]=a70;
  a51=5.5319039999999993e-002;
  a67=(a51*a10);
  a67=(a4*a67);
  if (res[0]!=0) res[0][29]=a67;
  a30=(a38*a30);
  a30=(a4*a30);
  a63=(a34*a5);
  a63=(a63/a0);
  a47=(a30-a63);
  if (res[0]!=0) res[0][30]=a47;
  a37=(a28*a37);
  a64=(a64*a12);
  a10=(a10*a64);
  a37=(a37+a10);
  a37=(a4*a37);
  a10=(a13*a38);
  a34=(a34*a10);
  a34=(a34/a0);
  a10=(a37-a34);
  if (res[0]!=0) res[0][31]=a10;
  a14=(a5*a14);
  a14=(a4*a14);
  a14=(-a14);
  if (res[0]!=0) res[0][32]=a14;
  a10=(a4*a38);
  if (res[0]!=0) res[0][33]=a10;
  a47=(a5/a13);
  a47=(a4*a47);
  a47=(-a47);
  if (res[0]!=0) res[0][34]=a47;
  a51=(a51*a19);
  a51=(a4*a51);
  if (res[0]!=0) res[0][35]=a51;
  a29=(a5*a29);
  a29=(a4*a29);
  a32=(a32*a38);
  a32=(a32/a0);
  a38=(a29-a32);
  if (res[0]!=0) res[0][36]=a38;
  a28=(a28*a33);
  a19=(a19*a64);
  a28=(a28+a19);
  a4=(a4*a28);
  a5=(a5*a13);
  a39=(a39*a5);
  a39=(a39/a0);
  a0=(a4-a39);
  if (res[0]!=0) res[0][37]=a0;
  a0=-1.;
  if (res[0]!=0) res[0][38]=a0;
  a5=(a56*a12);
  a78=(a78*a62);
  a5=(a5+a78);
  if (res[0]!=0) res[0][39]=a5;
  a5=(a74*a6);
  if (res[0]!=0) res[0][40]=a5;
  a5=(-a56);
  if (res[0]!=0) res[0][41]=a5;
  a5=1.;
  if (res[0]!=0) res[0][42]=a5;
  if (res[0]!=0) res[0][43]=a0;
  if (res[0]!=0) res[0][44]=a0;
  a78=(a58*a12);
  a77=(a77*a6);
  a78=(a78+a77);
  a78=(-a78);
  if (res[0]!=0) res[0][45]=a78;
  a74=(a74*a62);
  if (res[0]!=0) res[0][46]=a74;
  if (res[0]!=0) res[0][47]=a58;
  if (res[0]!=0) res[0][48]=a5;
  if (res[0]!=0) res[0][49]=a0;
  if (res[0]!=0) res[0][50]=a0;
  a72=(a13*a72);
  if (res[0]!=0) res[0][51]=a72;
  a58=(a58*a6);
  a56=(a56*a62);
  a58=(a58+a56);
  a58=(-a58);
  if (res[0]!=0) res[0][52]=a58;
  if (res[0]!=0) res[0][53]=a60;
  if (res[0]!=0) res[0][54]=a60;
  if (res[0]!=0) res[0][55]=a60;
  if (res[0]!=0) res[0][56]=a60;
  if (res[0]!=0) res[0][57]=a0;
  a58=(a54*a12);
  a26=(a26*a62);
  a58=(a58+a26);
  if (res[0]!=0) res[0][58]=a58;
  a58=(a71*a6);
  if (res[0]!=0) res[0][59]=a58;
  a58=(-a54);
  if (res[0]!=0) res[0][60]=a58;
  if (res[0]!=0) res[0][61]=a5;
  if (res[0]!=0) res[0][62]=a0;
  if (res[0]!=0) res[0][63]=a0;
  a58=(a52*a12);
  a27=(a27*a6);
  a58=(a58+a27);
  a58=(-a58);
  if (res[0]!=0) res[0][64]=a58;
  a71=(a71*a62);
  if (res[0]!=0) res[0][65]=a71;
  if (res[0]!=0) res[0][66]=a52;
  if (res[0]!=0) res[0][67]=a5;
  if (res[0]!=0) res[0][68]=a0;
  if (res[0]!=0) res[0][69]=a0;
  a69=(a13*a69);
  if (res[0]!=0) res[0][70]=a69;
  a52=(a52*a6);
  a54=(a54*a62);
  a52=(a52+a54);
  a52=(-a52);
  if (res[0]!=0) res[0][71]=a52;
  if (res[0]!=0) res[0][72]=a60;
  if (res[0]!=0) res[0][73]=a60;
  if (res[0]!=0) res[0][74]=a60;
  if (res[0]!=0) res[0][75]=a60;
  if (res[0]!=0) res[0][76]=a0;
  a52=(a50*a12);
  a75=(a75*a62);
  a52=(a52+a75);
  if (res[0]!=0) res[0][77]=a52;
  a52=(a68*a6);
  if (res[0]!=0) res[0][78]=a52;
  a52=(-a50);
  if (res[0]!=0) res[0][79]=a52;
  if (res[0]!=0) res[0][80]=a5;
  if (res[0]!=0) res[0][81]=a0;
  if (res[0]!=0) res[0][82]=a0;
  a52=(a48*a12);
  a35=(a35*a6);
  a52=(a52+a35);
  a52=(-a52);
  if (res[0]!=0) res[0][83]=a52;
  a68=(a68*a62);
  if (res[0]!=0) res[0][84]=a68;
  if (res[0]!=0) res[0][85]=a48;
  if (res[0]!=0) res[0][86]=a5;
  if (res[0]!=0) res[0][87]=a0;
  if (res[0]!=0) res[0][88]=a0;
  a66=(a13*a66);
  if (res[0]!=0) res[0][89]=a66;
  a48=(a48*a6);
  a50=(a50*a62);
  a48=(a48+a50);
  a48=(-a48);
  if (res[0]!=0) res[0][90]=a48;
  if (res[0]!=0) res[0][91]=a60;
  if (res[0]!=0) res[0][92]=a60;
  if (res[0]!=0) res[0][93]=a60;
  if (res[0]!=0) res[0][94]=a60;
  if (res[0]!=0) res[0][95]=a0;
  a48=(a42*a12);
  a18=(a18*a62);
  a48=(a48+a18);
  if (res[0]!=0) res[0][96]=a48;
  a48=(a65*a6);
  if (res[0]!=0) res[0][97]=a48;
  a48=(-a42);
  if (res[0]!=0) res[0][98]=a48;
  if (res[0]!=0) res[0][99]=a5;
  if (res[0]!=0) res[0][100]=a0;
  if (res[0]!=0) res[0][101]=a0;
  a12=(a46*a12);
  a79=(a79*a6);
  a12=(a12+a79);
  a12=(-a12);
  if (res[0]!=0) res[0][102]=a12;
  a65=(a65*a62);
  if (res[0]!=0) res[0][103]=a65;
  if (res[0]!=0) res[0][104]=a46;
  if (res[0]!=0) res[0][105]=a5;
  if (res[0]!=0) res[0][106]=a0;
  if (res[0]!=0) res[0][107]=a0;
  a13=(a13*a61);
  if (res[0]!=0) res[0][108]=a13;
  a46=(a46*a6);
  a42=(a42*a62);
  a46=(a46+a42);
  a46=(-a46);
  if (res[0]!=0) res[0][109]=a46;
  if (res[0]!=0) res[0][110]=a60;
  if (res[0]!=0) res[0][111]=a60;
  if (res[0]!=0) res[0][112]=a60;
  if (res[0]!=0) res[0][113]=a60;
  if (res[0]!=0) res[0][114]=a1;
  if (res[0]!=0) res[0][115]=a2;
  if (res[0]!=0) res[0][116]=a3;
  a15=(a15+a21);
  if (res[0]!=0) res[0][117]=a15;
  if (res[0]!=0) res[0][118]=a22;
  if (res[0]!=0) res[0][119]=a23;
  if (res[0]!=0) res[0][120]=a31;
  if (res[0]!=0) res[0][121]=a16;
  if (res[0]!=0) res[0][122]=a41;
  if (res[0]!=0) res[0][123]=a43;
  if (res[0]!=0) res[0][124]=a40;
  if (res[0]!=0) res[0][125]=a45;
  if (res[0]!=0) res[0][126]=a7;
  if (res[0]!=0) res[0][127]=a11;
  if (res[0]!=0) res[0][128]=a9;
  if (res[0]!=0) res[0][129]=a17;
  if (res[0]!=0) res[0][130]=a60;
  if (res[0]!=0) res[0][131]=a73;
  if (res[0]!=0) res[0][132]=a60;
  if (res[0]!=0) res[0][133]=a57;
  if (res[0]!=0) res[0][134]=a60;
  if (res[0]!=0) res[0][135]=a44;
  if (res[0]!=0) res[0][136]=a60;
  if (res[0]!=0) res[0][137]=a55;
  if (res[0]!=0) res[0][138]=a25;
  a76=(a76+a8);
  if (res[0]!=0) res[0][139]=a76;
  if (res[0]!=0) res[0][140]=a20;
  if (res[0]!=0) res[0][141]=a24;
  if (res[0]!=0) res[0][142]=a70;
  if (res[0]!=0) res[0][143]=a67;
  a63=(a63+a30);
  if (res[0]!=0) res[0][144]=a63;
  a34=(a34+a37);
  if (res[0]!=0) res[0][145]=a34;
  if (res[0]!=0) res[0][146]=a14;
  if (res[0]!=0) res[0][147]=a10;
  if (res[0]!=0) res[0][148]=a47;
  if (res[0]!=0) res[0][149]=a51;
  a32=(a32+a29);
  if (res[0]!=0) res[0][150]=a32;
  a39=(a39+a4);
  if (res[0]!=0) res[0][151]=a39;
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int eval_jac_g_leg(const casadi_real** arg, casadi_real** res, casadi_int* iw, casadi_real* w, int mem){
  return casadi_f0(arg, res, iw, w, mem);
}

extern "C" CASADI_SYMBOL_EXPORT int eval_jac_g_leg_alloc_mem(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT int eval_jac_g_leg_init_mem(int mem) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void eval_jac_g_leg_free_mem(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT int eval_jac_g_leg_checkout(void) {
  return 0;
}

extern "C" CASADI_SYMBOL_EXPORT void eval_jac_g_leg_release(int mem) {
}

extern "C" CASADI_SYMBOL_EXPORT void eval_jac_g_leg_incref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT void eval_jac_g_leg_decref(void) {
}

extern "C" CASADI_SYMBOL_EXPORT casadi_int eval_jac_g_leg_n_in(void) { return 2;}

extern "C" CASADI_SYMBOL_EXPORT casadi_int eval_jac_g_leg_n_out(void) { return 1;}

extern "C" CASADI_SYMBOL_EXPORT casadi_real eval_jac_g_leg_default_in(casadi_int i){
  switch (i) {
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* eval_jac_g_leg_name_in(casadi_int i){
  switch (i) {
    case 0: return "w";
    case 1: return "p";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const char* eval_jac_g_leg_name_out(casadi_int i){
  switch (i) {
    case 0: return "jac_g";
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* eval_jac_g_leg_sparsity_in(casadi_int i) {
  switch (i) {
    case 0: return casadi_s0;
    case 1: return casadi_s1;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT const casadi_int* eval_jac_g_leg_sparsity_out(casadi_int i) {
  switch (i) {
    case 0: return casadi_s2;
    default: return 0;
  }
}

extern "C" CASADI_SYMBOL_EXPORT int eval_jac_g_leg_work(casadi_int *sz_arg, casadi_int* sz_res, casadi_int *sz_iw, casadi_int *sz_w) {
  if (sz_arg) *sz_arg = 2;
  if (sz_res) *sz_res = 1;
  if (sz_iw) *sz_iw = 0;
  if (sz_w) *sz_w = 0;
  return 0;
}


