// Include Files
#include "spirit_utils/foot_jacobians.h"

// Function Definitions
//
// CALC_FOOT_JACOBIAN0
//     FOOT_JACOBIAN0 = CALC_FOOT_JACOBIAN0(IN1,IN2)
// Arguments    : const double in1[18]
//                const double in2[6]
//                double foot_jacobian0[9]
// Return Type  : void
//

void spirit_utils::calc_foot_jacobian0(const double in1[18], Eigen::MatrixXf& foot_jacobian0)
{
  double J0[9];
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t18;
  double t19;
  double t20;
  double t22;
  double t23;
  double t58;
  double t26;
  double t31_tmp;
  double t29;
  double t32;
  double t35;
  double t51;
  double t52;
  double t53;
  double t54;
  double t60;
  double t55;
  double t56;

  //     This function was generated by the Symbolic Math Toolbox version 8.4.
  //     22-Feb-2021 13:49:56
  t2 = std::cos(in1[16]);
  t3 = std::cos(in1[0]);
  t4 = std::cos(in1[1]);
  t5 = std::cos(in1[2]);
  t6 = std::cos(in1[15]);
  t7 = std::cos(in1[17]);
  t8 = std::sin(in1[16]);
  t9 = std::sin(in1[0]);
  t10 = std::sin(in1[1]);
  t11 = std::sin(in1[2]);
  t12 = std::sin(in1[15]);
  t13 = std::sin(in1[17]);
  t18 = t10 * -0.206000000000131;
  t19 = t10 * 0.206000000000131;
  t20 = t6 * t7;
  t10 = t6 * t13;
  t22 = t7 * t12;
  t23 = t12 * t13;
  t58 = t3 * t4;
  t26 = t58 * -0.206000000000131;
  t31_tmp = t4 * t9;
  t4 = t31_tmp * 0.206000000000131;
  t29 = t3 * t19;
  t32 = t9 * t19;
  t35 = std::sin(in1[1] + -in1[2]) * 0.206000000000131;
  t51 = t10 + t8 * t22;
  t52 = t22 + t8 * t10;
  t53 = t20 + -(t8 * t23);
  t54 = t23 + -(t8 * t20);
  t60 = ((t3 * 0.1009799999999359 + t32) + t11 * t4) + t5 * t9 * t18;
  t55 = t5 * (t58 * 0.206000000000131) + t11 * t29;
  t56 = t5 * t4 + t11 * t32;
  t10 = ((t9 * 0.1009799999999359 + t3 * t18) + t11 * t26) + t5 * t29;
  t32 = t26 + t55;
  t58 = t31_tmp * -0.206000000000131 + t56;
  t23 = t2 * t13;
  J0[0] = t8 * t60 + t23 * t10;
  t20 = t2 * t12;
  J0[1] = -(t53 * t10) - t20 * t60;
  t22 = t2 * t6;
  J0[2] = -(t52 * t10) + t22 * t60;
  t4 = t19 - t35;
  t10 = t2 * t7;
  J0[3] = (t8 * t32 + t23 * t58) + t10 * t4;
  J0[4] = (-(t53 * t58) + t51 * t4) - t20 * t32;
  J0[5] = (-(t52 * t58) + t54 * t4) + t22 * t32;
  J0[6] = (-(t8 * t55) + t10 * t35) - t23 * t56;
  J0[7] = (t35 * t51 + t53 * t56) + t20 * t55;
  J0[8] = (t35 * t54 + t52 * t56) - t22 * t55;
  // Map the array to the matrix
  // foot_jacobian0 = Eigen::Map<Eigen::MatrixXf>(J0,3,3);
  foot_jacobian0 <<J0[0], J0[3], J0[6],
                   J0[1], J0[4], J0[7],
                   J0[2], J0[5], J0[8];
}

void spirit_utils::calc_foot_jacobian1(const double in1[18], Eigen::MatrixXf& foot_jacobian1)
{
  double J1[9];
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t18;
  double t19;
  double t20;
  double t22;
  double t23;
  double t58;
  double t26;
  double t31_tmp;
  double t29;
  double t32;
  double t35;
  double t51;
  double t52;
  double t53;
  double t54;
  double t60;
  double t55;
  double t56;

  //     This function was generated by the Symbolic Math Toolbox version 8.4.
  //     22-Feb-2021 13:49:57
  t2 = std::cos(in1[16]);
  t3 = std::cos(in1[3]);
  t4 = std::cos(in1[4]);
  t5 = std::cos(in1[5]);
  t6 = std::cos(in1[15]);
  t7 = std::cos(in1[17]);
  t8 = std::sin(in1[16]);
  t9 = std::sin(in1[3]);
  t10 = std::sin(in1[4]);
  t11 = std::sin(in1[5]);
  t12 = std::sin(in1[15]);
  t13 = std::sin(in1[17]);
  t18 = t10 * -0.206000000000131;
  t19 = t10 * 0.206000000000131;
  t20 = t6 * t7;
  t10 = t6 * t13;
  t22 = t7 * t12;
  t23 = t12 * t13;
  t58 = t3 * t4;
  t26 = t58 * -0.206000000000131;
  t31_tmp = t4 * t9;
  t4 = t31_tmp * 0.206000000000131;
  t29 = t3 * t19;
  t32 = t9 * t19;
  t35 = std::sin(in1[4] + -in1[5]) * 0.206000000000131;
  t51 = t10 + t8 * t22;
  t52 = t22 + t8 * t10;
  t53 = t20 + -(t8 * t23);
  t54 = t23 + -(t8 * t20);
  t60 = ((t3 * 0.1009799999999359 + t32) + t11 * t4) + t5 * t9 * t18;
  t55 = t5 * (t58 * 0.206000000000131) + t11 * t29;
  t56 = t5 * t4 + t11 * t32;
  t10 = ((t9 * 0.1009799999999359 + t3 * t18) + t11 * t26) + t5 * t29;
  t32 = t26 + t55;
  t58 = t31_tmp * -0.206000000000131 + t56;
  t23 = t2 * t13;
  J1[0] = t8 * t60 + t23 * t10;
  t20 = t2 * t12;
  J1[1] = -(t53 * t10) - t20 * t60;
  t22 = t2 * t6;
  J1[2] = -(t52 * t10) + t22 * t60;
  t4 = t19 - t35;
  t10 = t2 * t7;
  J1[3] = (t8 * t32 + t23 * t58) + t10 * t4;
  J1[4] = (-(t53 * t58) + t51 * t4) - t20 * t32;
  J1[5] = (-(t52 * t58) + t54 * t4) + t22 * t32;
  J1[6] = (-(t8 * t55) + t10 * t35) - t23 * t56;
  J1[7] = (t35 * t51 + t53 * t56) + t20 * t55;
  J1[8] = (t35 * t54 + t52 * t56) - t22 * t55;
    // Map the array to the matrix
  // foot_jacobian1 = Eigen::Map<Eigen::MatrixXf>(J1,3,3);
    foot_jacobian1 <<J1[0], J1[3], J1[6],
                     J1[1], J1[4], J1[7],
                     J1[2], J1[5], J1[8];
}

void spirit_utils::calc_foot_jacobian2(const double in1[18], Eigen::MatrixXf& foot_jacobian2)
{
  double J2[9];
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t18;
  double t19;
  double t20;
  double t22;
  double t23;
  double t27_tmp;
  double t27;
  double t57;
  double t29;
  double t32;
  double t35;
  double t51;
  double t52;
  double t53;
  double t54;
  double t59;
  double t55;
  double t56;

  //     This function was generated by the Symbolic Math Toolbox version 8.4.
  //     22-Feb-2021 13:49:57
  t2 = std::cos(in1[16]);
  t3 = std::cos(in1[6]);
  t4 = std::cos(in1[7]);
  t5 = std::cos(in1[8]);
  t6 = std::cos(in1[15]);
  t7 = std::cos(in1[17]);
  t8 = std::sin(in1[16]);
  t9 = std::sin(in1[6]);
  t10 = std::sin(in1[7]);
  t11 = std::sin(in1[8]);
  t12 = std::sin(in1[15]);
  t13 = std::sin(in1[17]);
  t18 = t10 * -0.206000000000131;
  t19 = t10 * 0.206000000000131;
  t20 = t6 * t7;
  t10 = t6 * t13;
  t22 = t7 * t12;
  t23 = t12 * t13;
  t27_tmp = t3 * t4;
  t27 = t27_tmp * 0.206000000000131;
  t57 = t4 * t9;
  t29 = t57 * -0.206000000000131;
  t4 = t3 * t19;
  t32 = t9 * t19;
  t35 = std::sin(in1[7] + -in1[8]) * 0.206000000000131;
  t51 = t10 + t8 * t22;
  t52 = t22 + t8 * t10;
  t53 = t20 + -(t8 * t23);
  t54 = t23 + -(t8 * t20);
  t59 = ((t9 * 0.1009799999999359 + t4) + t11 * t27) + t3 * t5 * t18;
  t55 = t5 * t27 + t11 * t4;
  t56 = t5 * (t57 * 0.206000000000131) + t11 * t32;
  t10 = ((t3 * 0.1009799999999359 + t9 * t18) + t11 * t29) + t5 * t32;
  t57 = t27_tmp * -0.206000000000131 + t55;
  t27 = t29 + t56;
  t23 = t2 * t13;
  J2[0] = -(t8 * t10) - t23 * t59;
  t20 = t2 * t12;
  J2[1] = t53 * t59 + t20 * t10;
  t22 = t2 * t6;
  J2[2] = t52 * t59 - t22 * t10;
  t4 = t19 - t35;
  t10 = t2 * t7;
  J2[3] = (t8 * t57 + t23 * t27) + t10 * t4;
  J2[4] = (-(t53 * t27) + t51 * t4) - t20 * t57;
  J2[5] = (-(t52 * t27) + t54 * t4) + t22 * t57;
  J2[6] = (-(t8 * t55) + t10 * t35) - t23 * t56;
  J2[7] = (t35 * t51 + t53 * t56) + t20 * t55;
  J2[8] = (t35 * t54 + t52 * t56) - t22 * t55;
    // Map the array to the matrix
  // foot_jacobian2 = Eigen::Map<Eigen::MatrixXf>(J2,3,3);
    foot_jacobian2 <<J2[0], J2[3], J2[6],
                     J2[1], J2[4], J2[7],
                     J2[2], J2[5], J2[8];
}

void spirit_utils::calc_foot_jacobian3(const double in1[18], Eigen::MatrixXf& foot_jacobian3)
{
  double J3[9];
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t18;
  double t19;
  double t20;
  double t22;
  double t23;
  double t27_tmp;
  double t27;
  double t57;
  double t29;
  double t32;
  double t35;
  double t51;
  double t52;
  double t53;
  double t54;
  double t59;
  double t55;
  double t56;

  //     This function was generated by the Symbolic Math Toolbox version 8.4.
  //     22-Feb-2021 13:49:58
  t2 = std::cos(in1[16]);
  t3 = std::cos(in1[9]);
  t4 = std::cos(in1[10]);
  t5 = std::cos(in1[11]);
  t6 = std::cos(in1[15]);
  t7 = std::cos(in1[17]);
  t8 = std::sin(in1[16]);
  t9 = std::sin(in1[9]);
  t10 = std::sin(in1[10]);
  t11 = std::sin(in1[11]);
  t12 = std::sin(in1[15]);
  t13 = std::sin(in1[17]);
  t18 = t10 * -0.206000000000131;
  t19 = t10 * 0.206000000000131;
  t20 = t6 * t7;
  t10 = t6 * t13;
  t22 = t7 * t12;
  t23 = t12 * t13;
  t27_tmp = t3 * t4;
  t27 = t27_tmp * 0.206000000000131;
  t57 = t4 * t9;
  t29 = t57 * -0.206000000000131;
  t4 = t3 * t19;
  t32 = t9 * t19;
  t35 = std::sin(in1[10] + -in1[11]) * 0.206000000000131;
  t51 = t10 + t8 * t22;
  t52 = t22 + t8 * t10;
  t53 = t20 + -(t8 * t23);
  t54 = t23 + -(t8 * t20);
  t59 = ((t9 * 0.1009799999999359 + t4) + t11 * t27) + t3 * t5 * t18;
  t55 = t5 * t27 + t11 * t4;
  t56 = t5 * (t57 * 0.206000000000131) + t11 * t32;
  t10 = ((t3 * 0.1009799999999359 + t9 * t18) + t11 * t29) + t5 * t32;
  t57 = t27_tmp * -0.206000000000131 + t55;
  t27 = t29 + t56;
  t23 = t2 * t13;
  J3[0] = -(t8 * t10) - t23 * t59;
  t20 = t2 * t12;
  J3[1] = t53 * t59 + t20 * t10;
  t22 = t2 * t6;
  J3[2] = t52 * t59 - t22 * t10;
  t4 = t19 - t35;
  t10 = t2 * t7;
  J3[3] = (t8 * t57 + t23 * t27) + t10 * t4;
  J3[4] = (-(t53 * t27) + t51 * t4) - t20 * t57;
  J3[5] = (-(t52 * t27) + t54 * t4) + t22 * t57;
  J3[6] = (-(t8 * t55) + t10 * t35) - t23 * t56;
  J3[7] = (t35 * t51 + t53 * t56) + t20 * t55;
  J3[8] = (t35 * t54 + t52 * t56) - t22 * t55;
      // Map the array to the matrix
  // foot_jacobian3 = Eigen::Map<Eigen::MatrixXf>(J3,3,3);
    foot_jacobian3 <<J3[0], J3[3], J3[6],
                     J3[1], J3[4], J3[7],
                     J3[2], J3[5], J3[8];
}

void spirit_utils::calc_jacobian(const double in1[18], Eigen::MatrixXf& jacobian)
{
  double A[216];
  double t2;
  double t3;
  double t4;
  double t5;
  double t6;
  double t7;
  double t8;
  double t9;
  double t10;
  double t11;
  double t12;
  double t13;
  double t14;
  double t15;
  double t16;
  double t17;
  double t18;
  double t19;
  double t20;
  double t21;
  double t22;
  double t23;
  double t24;
  double t25;
  double t26;
  double t27;
  double t28;
  double t29;
  double t30;
  double t31;
  double t36;
  double t37;
  double t38;
  double t39;
  double t44;
  double t45;
  double t46;
  double t47;
  double t62;
  double t63;
  double t64;
  double t65;
  double t66;
  double t67;
  double t68;
  double t69;
  double t48;
  double t49;
  double t50;
  double t51;
  double t96;
  double t97;
  double t118;
  double t119;
  double t120;
  double t121;
  double t122;
  double t123;
  double t124;
  double t125;
  double t146;
  double t147;
  double t148;
  double t149;
  double t126;
  double t127;
  double t139;
  double t140;
  double t141;
  double t142;
  double t144;
  double t151;

  //     This function was generated by the Symbolic Math Toolbox version 8.4.
  //     25-Feb-2021 13:53:05
  t2 = std::cos(in1[16]);
  t3 = std::cos(in1[0]);
  t4 = std::cos(in1[1]);
  t5 = std::cos(in1[2]);
  t6 = std::cos(in1[3]);
  t7 = std::cos(in1[4]);
  t8 = std::cos(in1[5]);
  t9 = std::cos(in1[6]);
  t10 = std::cos(in1[7]);
  t11 = std::cos(in1[8]);
  t12 = std::cos(in1[9]);
  t13 = std::cos(in1[10]);
  t14 = std::cos(in1[11]);
  t15 = std::cos(in1[15]);
  t16 = std::cos(in1[17]);
  t17 = std::sin(in1[16]);
  t18 = std::sin(in1[0]);
  t19 = std::sin(in1[1]);
  t20 = std::sin(in1[2]);
  t21 = std::sin(in1[3]);
  t22 = std::sin(in1[4]);
  t23 = std::sin(in1[5]);
  t24 = std::sin(in1[6]);
  t25 = std::sin(in1[7]);
  t26 = std::sin(in1[8]);
  t27 = std::sin(in1[9]);
  t28 = std::sin(in1[10]);
  t29 = std::sin(in1[11]);
  t30 = std::sin(in1[15]);
  t31 = std::sin(in1[17]);
  t36 = t15 * t16;
  t37 = t15 * t31;
  t38 = t16 * t30;
  t39 = t30 * t31;
  t44 = in1[1] + -in1[2];
  t45 = in1[4] + -in1[5];
  t46 = in1[7] + -in1[8];
  t47 = in1[10] + -in1[11];
  t62 = t4 * 0.206;
  t63 = t7 * 0.206;
  t64 = t10 * 0.206;
  t65 = t13 * 0.206;
  t66 = t19 * 0.206;
  t67 = t22 * 0.206;
  t68 = t25 * 0.206;
  t69 = t28 * 0.206;
  t48 = std::cos(t44);
  t49 = std::cos(t45);
  t50 = std::cos(t46);
  t51 = std::cos(t47);
  t96 = t37 + t17 * t38;
  t97 = t38 + t17 * t37;
  t118 = t48 * 0.206;
  t119 = t49 * 0.206;
  t120 = t50 * 0.206;
  t121 = t51 * 0.206;
  t122 = std::sin(t44) * 0.206;
  t123 = std::sin(t45) * 0.206;
  t124 = std::sin(t46) * 0.206;
  t125 = std::sin(t47) * 0.206;
  t146 = ((t9 * t68 + t24 * 0.10098) + t9 * t26 * t64) + t9 * t11 * t25 * -0.206;
  t147 = ((t12 * t69 + t27 * 0.10098) + t12 * t29 * t65) + t12 * t14 * t28 *
    -0.206;
  t148 = ((t18 * t66 + t3 * 0.10098) + t18 * t20 * t62) + t5 * t18 * t19 *
    -0.206;
  t149 = ((t21 * t67 + t6 * 0.10098) + t21 * t23 * t63) + t8 * t21 * t22 *
    -0.206;
  t126 = t36 + -(t17 * t39);
  t127 = t39 + -(t17 * t36);
  t45 = -t66 + t122;
  t139 = -t67 + t123;
  t140 = -t68 + t124;
  t141 = -t69 + t125;
  t142 = (-t62 + t118) + 0.2263;
  t144 = (-t64 + t120) + 0.2263;
  t44 = ((t3 * t19 * -0.206 + t18 * 0.10098) + t5 * (t3 * t66)) + t3 * t4 * t20 *
    -0.206;
  t151 = ((t6 * t22 * -0.206 + t21 * 0.10098) + t8 * (t6 * t67)) + t6 * t7 * t23
    * -0.206;
  t25 = ((t24 * t25 * -0.206 + t9 * 0.10098) + t11 * (t24 * t68)) + t10 * t24 *
    t26 * -0.206;
  t11 = ((t27 * t28 * -0.206 + t12 * 0.10098) + t14 * (t27 * t69)) + t13 * t27 *
    t29 * -0.206;
  t67 = (t63 + -t119) + 0.2263;
  t66 = (t65 + -t121) + 0.2263;
  t8 = t2 * t31;
  A[0] = t17 * t148 + t8 * t44;
  t22 = t2 * t30;
  A[1] = -t126 * t44 - t22 * t148;
  t23 = t2 * t15;
  A[2] = -t97 * t44 + t23 * t148;
  std::memset(&A[3], 0, 9U * sizeof(double));
  t64 = t4 - t48;
  t5 = t3 * t17;
  t19 = t2 * t18 * t31;
  t20 = -t2 * t16;
  A[12] = (t20 * t45 - t5 * t64 * 0.206) - t19 * t64 * 0.206;
  t46 = t2 * t3;
  t47 = t46 * t30;
  A[13] = (-t96 * t45 + t18 * t126 * t64 * 0.206) + t47 * t64 * 0.206;
  t62 = t18 * t97;
  t46 *= t15;
  A[14] = (-t127 * t45 + t62 * t64 * 0.206) - t46 * t64 * 0.206;
  std::memset(&A[15], 0, 9U * sizeof(double));
  t64 = t2 * t16;
  A[24] = (t5 * t48 * -0.206 + t64 * t122) - t19 * t48 * 0.206;
  A[25] = (t96 * t122 + t18 * t118 * t126) + t47 * t118;
  A[26] = (t122 * t127 + t62 * t118) - t46 * t48 * 0.206;
  std::memset(&A[27], 0, 12U * sizeof(double));
  A[39] = t17 * t149 + t8 * t151;
  A[40] = -t126 * t151 - t22 * t149;
  A[41] = -t97 * t151 + t23 * t149;
  std::memset(&A[42], 0, 9U * sizeof(double));
  t5 = t7 - t49;
  t19 = t6 * t17;
  t46 = t2 * t21 * t31;
  A[51] = (t20 * t139 - t19 * t5 * 0.206) - t46 * t5 * 0.206;
  t47 = t2 * t6;
  t62 = t47 * t30;
  A[52] = (-t96 * t139 + t21 * t126 * t5 * 0.206) + t62 * t5 * 0.206;
  t45 = t21 * t97;
  t47 *= t15;
  A[53] = (-t127 * t139 + t45 * t5 * 0.206) - t47 * t5 * 0.206;
  std::memset(&A[54], 0, 9U * sizeof(double));
  A[63] = (t19 * t49 * -0.206 + t64 * t123) - t46 * t49 * 0.206;
  A[64] = (t96 * t123 + t21 * t119 * t126) + t62 * t119;
  A[65] = (t123 * t127 + t45 * t119) - t47 * t49 * 0.206;
  std::memset(&A[66], 0, 12U * sizeof(double));
  A[78] = -t17 * t25 - t8 * t146;
  A[79] = t126 * t146 + t22 * t25;
  A[80] = t97 * t146 - t23 * t25;
  std::memset(&A[81], 0, 9U * sizeof(double));
  t5 = t10 - t50;
  t19 = t9 * t17;
  t46 = t2 * t24 * t31;
  A[90] = (t20 * t140 - t19 * t5 * 0.206) - t46 * t5 * 0.206;
  t47 = t2 * t9;
  t62 = t47 * t30;
  A[91] = (-t96 * t140 + t24 * t126 * t5 * 0.206) + t62 * t5 * 0.206;
  t45 = t24 * t97;
  t47 *= t15;
  A[92] = (-t127 * t140 + t45 * t5 * 0.206) - t47 * t5 * 0.206;
  std::memset(&A[93], 0, 9U * sizeof(double));
  A[102] = (t19 * t50 * -0.206 + t64 * t124) - t46 * t50 * 0.206;
  A[103] = (t96 * t124 + t24 * t120 * t126) + t62 * t120;
  A[104] = (t124 * t127 + t45 * t120) - t47 * t50 * 0.206;
  std::memset(&A[105], 0, 12U * sizeof(double));
  A[117] = -t17 * t11 - t8 * t147;
  A[118] = t126 * t147 + t22 * t11;
  A[119] = t97 * t147 - t23 * t11;
  std::memset(&A[120], 0, 9U * sizeof(double));
  t5 = t13 - t51;
  t19 = t12 * t17;
  t46 = t2 * t27 * t31;
  A[129] = (t20 * t141 - t19 * t5 * 0.206) - t46 * t5 * 0.206;
  t47 = t2 * t12;
  t62 = t47 * t30;
  A[130] = (-t96 * t141 + t27 * t126 * t5 * 0.206) + t62 * t5 * 0.206;
  t45 = t27 * t97;
  t47 *= t15;
  A[131] = (-t127 * t141 + t45 * t5 * 0.206) - t47 * t5 * 0.206;
  std::memset(&A[132], 0, 9U * sizeof(double));
  A[141] = (t19 * t51 * -0.206 + t64 * t125) - t46 * t51 * 0.206;
  A[142] = (t96 * t125 + t27 * t121 * t126) + t62 * t121;
  A[143] = (t125 * t127 + t45 * t121) - t47 * t51 * 0.206;
  A[144] = 1.0;
  A[145] = 0.0;
  A[146] = 0.0;
  A[147] = 1.0;
  A[148] = 0.0;
  A[149] = 0.0;
  A[150] = 1.0;
  A[151] = 0.0;
  A[152] = 0.0;
  A[153] = 1.0;
  A[154] = 0.0;
  A[155] = 0.0;
  A[156] = 0.0;
  A[157] = 1.0;
  A[158] = 0.0;
  A[159] = 0.0;
  A[160] = 1.0;
  A[161] = 0.0;
  A[162] = 0.0;
  A[163] = 1.0;
  A[164] = 0.0;
  A[165] = 0.0;
  A[166] = 1.0;
  A[167] = 0.0;
  A[168] = 0.0;
  A[169] = 0.0;
  A[170] = 1.0;
  A[171] = 0.0;
  A[172] = 0.0;
  A[173] = 1.0;
  A[174] = 0.0;
  A[175] = 0.0;
  A[176] = 1.0;
  A[177] = 0.0;
  A[178] = 0.0;
  A[179] = 1.0;
  A[180] = 0.0;
  A[181] = (-t97 * (t148 + 0.07) - t127 * t142) - t23 * t44;
  A[182] = (t96 * t142 + t126 * (t148 + 0.07)) - t22 * t44;
  A[183] = 0.0;
  A[184] = (-t97 * (t149 + 0.07) + t127 * t67) - t23 * t151;
  A[185] = (-t96 * t67 + t126 * (t149 + 0.07)) - t22 * t151;
  A[186] = 0.0;
  A[187] = (t97 * (t25 + 0.07) - t127 * t144) + t23 * t146;
  A[188] = (t96 * t144 - t126 * (t25 + 0.07)) + t22 * t146;
  A[189] = 0.0;
  A[190] = (t97 * (t11 + 0.07) + t127 * t66) + t23 * t147;
  A[191] = (-t96 * t66 - t126 * (t11 + 0.07)) + t22 * t147;
  t22 = t16 * t17;
  t23 = t17 * t31;
  A[192] = (t2 * t44 - t22 * t142) + t23 * (t148 + 0.07);
  t5 = t2 * t39;
  t19 = t17 * t30;
  t46 = t2 * t38;
  A[193] = (t46 * t142 - t5 * (t148 + 0.07)) + t19 * t44;
  t47 = t15 * t17;
  t62 = t2 * t37;
  A[194] = (-t2 * t36 * t142 - t47 * t44) + t62 * (t148 + 0.07);
  A[195] = (t2 * t151 + t22 * t67) + t23 * (t149 + 0.07);
  t45 = -t2 * t38;
  A[196] = (t45 * t67 - t5 * (t149 + 0.07)) + t19 * t151;
  t44 = t2 * t36;
  A[197] = (t44 * t67 - t47 * t151) + t62 * (t149 + 0.07);
  A[198] = (-t2 * t146 - t22 * t144) - t23 * (t25 + 0.07);
  A[199] = (t46 * t144 - t19 * t146) + t5 * (t25 + 0.07);
  A[200] = (t47 * t146 - t44 * t144) - t62 * (t25 + 0.07);
  A[201] = (-t2 * t147 + t22 * t66) - t23 * (t11 + 0.07);
  A[202] = (t45 * t66 - t19 * t147) + t5 * (t11 + 0.07);
  A[203] = (t47 * t147 + t44 * t66) - t62 * (t11 + 0.07);
  A[204] = t20 * (t148 + 0.07) - t8 * t142;
  A[205] = -t96 * (t148 + 0.07) + t126 * t142;
  A[206] = t97 * t142 - t127 * (t148 + 0.07);
  A[207] = t20 * (t149 + 0.07) + t8 * t67;
  A[208] = -t96 * (t149 + 0.07) - t126 * t67;
  A[209] = -t97 * t67 - t127 * (t149 + 0.07);
  A[210] = t64 * (t25 + 0.07) - t8 * t144;
  A[211] = t96 * (t25 + 0.07) + t126 * t144;
  A[212] = t97 * t144 + t127 * (t25 + 0.07);
  A[213] = t64 * (t11 + 0.07) + t8 * t66;
  A[214] = t96 * (t11 + 0.07) - t126 * t66;
  A[215] = -t97 * t66 + t127 * (t11 + 0.07);

  // Map the array to the matrix
  // jacobian = Eigen::Map<Eigen::MatrixXf>(A,12,18);
  jacobian <<A[0], A[12], A[24], A[36], A[48], A[60], A[72], A[84], A[96], A[108], A[120], A[132], A[144], A[156], A[168], A[180], A[192], A[204],
             A[1], A[13], A[25], A[37], A[49], A[61], A[73], A[85], A[97], A[109], A[121], A[133], A[145], A[157], A[169], A[181], A[193], A[205],
             A[2], A[14], A[26], A[38], A[50], A[62], A[74], A[86], A[98], A[110], A[122], A[134], A[146], A[158], A[170], A[182], A[194], A[206],
             A[3], A[15], A[27], A[39], A[51], A[63], A[75], A[87], A[99], A[111], A[123], A[135], A[147], A[159], A[171], A[183], A[195], A[207],
             A[4], A[16], A[28], A[40], A[52], A[64], A[76], A[88], A[100], A[112], A[124], A[136], A[148], A[160], A[172], A[184], A[196], A[208],
             A[5], A[17], A[29], A[41], A[53], A[65], A[77], A[89], A[101], A[113], A[125], A[137], A[149], A[161], A[173], A[185], A[197], A[209],
             A[6], A[18], A[30], A[42], A[54], A[66], A[78], A[90], A[102], A[114], A[126], A[138], A[150], A[162], A[174], A[186], A[198], A[210],
             A[7], A[19], A[31], A[43], A[55], A[67], A[79], A[91], A[103], A[115], A[127], A[139], A[151], A[163], A[175], A[187], A[199], A[211],
             A[8], A[20], A[32], A[44], A[56], A[68], A[80], A[92], A[104], A[116], A[128], A[140], A[152], A[164], A[176], A[188], A[200], A[212],
             A[9], A[21], A[33], A[45], A[57], A[69], A[81], A[93], A[105], A[117], A[129], A[141], A[153], A[165], A[177], A[189], A[201], A[213],
             A[10], A[22], A[34], A[46], A[58], A[70], A[82], A[94], A[106], A[118], A[130], A[142], A[154], A[166], A[178], A[190], A[202], A[214],
             A[11], A[23], A[35], A[47], A[59], A[71], A[83], A[95], A[107], A[119], A[131], A[143], A[155], A[167], A[179], A[191], A[203], A[215];
             
}
