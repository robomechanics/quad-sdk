/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Tue Sep  1 08:02:05 2020. */

#ifndef PB_SIMPLE_PB_H_INCLUDED
#define PB_SIMPLE_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _MotorType {
    MotorType_U8_DD = 0,
    MotorType_U10P_G7 = 1,
    MotorType_U8II_G25 = 2,
    MotorType_DXL_MX106 = 3,
    MotorType_DCX32_GPX = 4,
    MotorType_U8II_G30 = 5,
    MotorType_U8Lite_150 = 6,
    MotorType_U8Lite_150_G20 = 7,
    MotorType_U8Lite_150_G25 = 8,
    MotorType_U8Lite_150_G30 = 9,
    MotorType_U8Lite_150_G18 = 10,
    MotorType_U10P_100_G15 = 11,
    MotorType_U8_100_G6 = 12,
    MotorType_U8_100_G9 = 13,
    MotorType_NIDEC_D77_G22 = 14,
    MotorType_NIDEC_D77 = 15,
    MotorType_NIDEC_D64_G19 = 16,
    MotorType_MN601_170_G20 = 17,
    MotorType_U10P_100_G16 = 18,
    MotorType_U10P_100 = 19,
    MotorType_A80_G6 = 20,
    MotorType_A80_G12 = 21
} MotorType;
#define _MotorType_MIN MotorType_U8_DD
#define _MotorType_MAX MotorType_A80_G12
#define _MotorType_ARRAYSIZE ((MotorType)(MotorType_A80_G12+1))

typedef enum _JointMode {
    JointMode_OFF = 0,
    JointMode_PWM = 1,
    JointMode_POSITION = 2,
    JointMode_TORQUE = 4,
    JointMode_CURRENT = 5
} JointMode;
#define _JointMode_MIN JointMode_OFF
#define _JointMode_MAX JointMode_CURRENT
#define _JointMode_ARRAYSIZE ((JointMode)(JointMode_CURRENT+1))

typedef enum _LimbCmdMode {
    LimbCmdMode_LIMB_OFF = 0,
    LimbCmdMode_LIMB_FORCE = 1,
    LimbCmdMode_JOINT_CURRENT = 2,
    LimbCmdMode_JOINT_TORQUE = 3,
    LimbCmdMode_JOINT_POSITION_OVER_CURRENT = 4,
    LimbCmdMode_JOINT_POSITION_OVER_TORQUE = 5
} LimbCmdMode;
#define _LimbCmdMode_MIN LimbCmdMode_LIMB_OFF
#define _LimbCmdMode_MAX LimbCmdMode_JOINT_POSITION_OVER_TORQUE
#define _LimbCmdMode_ARRAYSIZE ((LimbCmdMode)(LimbCmdMode_JOINT_POSITION_OVER_TORQUE+1))

typedef enum _JointParams_Type {
    JointParams_Type_GRBL = 0,
    JointParams_Type_GRBLE = 1,
    JointParams_Type_RIGID = 2,
    JointParams_Type_DXL_PWM = 3,
    JointParams_Type_DXL_POS = 4
} JointParams_Type;
#define _JointParams_Type_MIN JointParams_Type_GRBL
#define _JointParams_Type_MAX JointParams_Type_DXL_POS
#define _JointParams_Type_ARRAYSIZE ((JointParams_Type)(JointParams_Type_DXL_POS+1))

typedef enum _LimbParams_Type {
    LimbParams_Type_SYMM5BAR_EXT_RAD = 0,
    LimbParams_Type_SYMM5BAR_EXT_M = 1,
    LimbParams_Type_PARA5BAR_EXT_RAD = 2,
    LimbParams_Type_PARA5BAR_EXT_M = 3,
    LimbParams_Type_PARA5BAR_CART = 4,
    LimbParams_Type_SERIAL_RR_POLAR = 5
} LimbParams_Type;
#define _LimbParams_Type_MIN LimbParams_Type_SYMM5BAR_EXT_RAD
#define _LimbParams_Type_MAX LimbParams_Type_SERIAL_RR_POLAR
#define _LimbParams_Type_ARRAYSIZE ((LimbParams_Type)(LimbParams_Type_SERIAL_RR_POLAR+1))

typedef enum _RobotParams_Type {
    RobotParams_Type_MINITAUR = 0,
    RobotParams_Type_MINITAUR_E = 1,
    RobotParams_Type_NGR = 2,
    RobotParams_Type_SPIRIT = 3
} RobotParams_Type;
#define _RobotParams_Type_MIN RobotParams_Type_MINITAUR
#define _RobotParams_Type_MAX RobotParams_Type_SPIRIT
#define _RobotParams_Type_ARRAYSIZE ((RobotParams_Type)(RobotParams_Type_SPIRIT+1))

typedef enum _RobotStatus_Mode {
    RobotStatus_Mode_RESET = 0,
    RobotStatus_Mode_TMC_BIAS_SAMPLING = 1,
    RobotStatus_Mode_KILLED_USER = 2,
    RobotStatus_Mode_KILLED_IMU_ERROR = 3,
    RobotStatus_Mode_KILLED_JOY_ERROR = 4,
    RobotStatus_Mode_KILLED_MAVCMD = 5,
    RobotStatus_Mode_KILLED_MOTOR_ERROR = 6,
    RobotStatus_Mode_KILLED_INVERTED_ERROR = 7,
    RobotStatus_Mode_FALL_RECOVERY = 8,
    RobotStatus_Mode_SELF_CHECK = 9,
    RobotStatus_Mode_SOFT_START = 10,
    RobotStatus_Mode_BEHAVIOR = 11,
    RobotStatus_Mode_KILLED_ETHERCAT_ERROR = 12
} RobotStatus_Mode;
#define _RobotStatus_Mode_MIN RobotStatus_Mode_RESET
#define _RobotStatus_Mode_MAX RobotStatus_Mode_KILLED_ETHERCAT_ERROR
#define _RobotStatus_Mode_ARRAYSIZE ((RobotStatus_Mode)(RobotStatus_Mode_KILLED_ETHERCAT_ERROR+1))

/* Struct definitions */
typedef struct _BatteryState {
    float voltage;
    float current;
    float percentage;
    float mvoltage;
/* @@protoc_insertion_point(struct:BatteryState) */
} BatteryState;

typedef struct _BehaviorConfig {
    bool overTemperatureShutoff;
    bool softStart;
    bool fallRecovery;
    bool autopilot;
    bool selfCheck;
    bool negativePowerShutoff;
/* @@protoc_insertion_point(struct:BehaviorConfig) */
} BehaviorConfig;

typedef struct _HardwareConfig {
    bool singleLegTest;
    uint32_t versionOverride;
/* @@protoc_insertion_point(struct:HardwareConfig) */
} HardwareConfig;

typedef struct _JointParams {
    JointParams_Type type;
    uint32_t address;
    float gearRatio;
    int32_t direction;
    float zero;
    MotorType motorType;
/* @@protoc_insertion_point(struct:JointParams) */
} JointParams;

typedef struct _JointState {
    float position;
    float velocity;
    float voltage;
    float current;
    float temperature;
    float torqueEst;
/* @@protoc_insertion_point(struct:JointState) */
} JointState;

typedef struct _Joy {
    pb_size_t axes_count;
    float axes[4];
    pb_size_t buttons_count;
    int32_t buttons[10];
/* @@protoc_insertion_point(struct:Joy) */
} Joy;

typedef struct _LimbCmd {
    uint32_t mode;
    pb_size_t feedforward_count;
    float feedforward[3];
    pb_size_t kp_count;
    float kp[3];
    pb_size_t kd_count;
    float kd[3];
/* @@protoc_insertion_point(struct:LimbCmd) */
} LimbCmd;

typedef struct _LimbState {
    pb_size_t q_count;
    float q[3];
    pb_size_t dq_count;
    float dq[3];
    pb_size_t current_count;
    float current[3];
    pb_size_t temperature_count;
    float temperature[3];
    pb_size_t torqueEst_count;
    float torqueEst[3];
    pb_size_t voltage_count;
    float voltage[3];
    pb_size_t torqueExt_count;
    float torqueExt[3];
    float kneeAng;
    float dkneeAng_dkneeJoint;
    pb_size_t currentCmd_count;
    float currentCmd[3];
    pb_size_t position_count;
    float position[3];
    pb_size_t velocity_count;
    float velocity[3];
    pb_size_t Jac_count;
    float Jac[9];
    pb_size_t qraw_count;
    float qraw[3];
    pb_size_t status_count;
    uint32_t status[3];
/* @@protoc_insertion_point(struct:LimbState) */
} LimbState;

typedef struct _MotorModelParams {
    float kE;
    float kT;
    float kR;
    float kJv;
    pb_size_t currents_count;
    float currents[10];
    pb_size_t torques_count;
    float torques[10];
/* @@protoc_insertion_point(struct:MotorModelParams) */
} MotorModelParams;

typedef struct _Quaternion {
    float x;
    float y;
    float z;
    float w;
/* @@protoc_insertion_point(struct:Quaternion) */
} Quaternion;

typedef struct _RobotStatus {
    uint32_t imu;
    float updateARate;
    float behaviorRate;
    uint32_t updateATime;
    uint32_t behaviorTime;
    RobotStatus_Mode mode;
/* @@protoc_insertion_point(struct:RobotStatus) */
} RobotStatus;

typedef struct _Vector3 {
    float x;
    float y;
    float z;
/* @@protoc_insertion_point(struct:Vector3) */
} Vector3;

typedef struct _Imu {
    Quaternion orientation;
    Vector3 angular_velocity;
    Vector3 linear_acceleration;
    Vector3 euler;
    pb_size_t orientation_covariance_count;
    float orientation_covariance[9];
    float linear_acceleration_covariance;
    float angular_velocity_covariance;
/* @@protoc_insertion_point(struct:Imu) */
} Imu;

typedef struct _LimbParams {
    LimbParams_Type type;
    pb_size_t kinParams_count;
    float kinParams[12];
    uint64_t fkFun;
    pb_size_t jointInd_count;
    uint32_t jointInd[6];
    Vector3 d;
/* @@protoc_insertion_point(struct:LimbParams) */
} LimbParams;

typedef struct _Pose {
    Vector3 position;
    Quaternion orientation;
/* @@protoc_insertion_point(struct:Pose) */
} Pose;

typedef struct _RobotCmd {
    pb_size_t limbs_count;
    LimbCmd limbs[4];
/* @@protoc_insertion_point(struct:RobotCmd) */
} RobotCmd;

typedef struct _RobotState {
    pb_size_t limbs_count;
    LimbState limbs[4];
    pb_size_t diagnostics_count;
    float diagnostics[5];
/* @@protoc_insertion_point(struct:RobotState) */
} RobotState;

typedef struct _Twist {
    Vector3 linear;
    Vector3 angular;
/* @@protoc_insertion_point(struct:Twist) */
} Twist;

typedef struct _BehaviorCmd {
    uint32_t id;
    Twist twist;
    Pose pose;
    uint32_t mode;
/* @@protoc_insertion_point(struct:BehaviorCmd) */
} BehaviorCmd;

typedef struct _RobotParams {
    RobotParams_Type type;
    uint32_t version;
    uint32_t startupDelay;
    pb_size_t joints_count;
    JointParams joints[20];
    pb_size_t limbs_count;
    LimbParams limbs[4];
/* @@protoc_insertion_point(struct:RobotParams) */
} RobotParams;

typedef struct _RobotData {
    Imu imu;
    BatteryState batt;
    Joy joy;
    Twist twist;
    uint32_t behaviorId;
    uint32_t behaviorMode;
    uint32_t millis;
    RobotStatus status;
    BehaviorCmd behaviorCmd;
/* @@protoc_insertion_point(struct:RobotData) */
} RobotData;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Vector3_init_default                     {0, 0, 0}
#define Quaternion_init_default                  {0, 0, 0, 0}
#define Twist_init_default                       {Vector3_init_default, Vector3_init_default}
#define Pose_init_default                        {Vector3_init_default, Quaternion_init_default}
#define Imu_init_default                         {Quaternion_init_default, Vector3_init_default, Vector3_init_default, Vector3_init_default, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 0}
#define JointState_init_default                  {0, 0, 0, 0, 0, 0}
#define BatteryState_init_default                {0, 0, 0, 0}
#define Joy_init_default                         {0, {0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define MotorModelParams_init_default            {0, 0, 0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define JointParams_init_default                 {(JointParams_Type)0, 0, 0, 0, 0, (MotorType)0}
#define LimbParams_init_default                  {(LimbParams_Type)0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 0, {0, 0, 0, 0, 0, 0}, Vector3_init_default}
#define BehaviorCmd_init_default                 {0, Twist_init_default, Pose_init_default, 0}
#define BehaviorConfig_init_default              {0, 0, 0, 0, 0, 0}
#define HardwareConfig_init_default              {0, 0}
#define RobotParams_init_default                 {(RobotParams_Type)0, 0, 0, 0, {JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default, JointParams_init_default}, 0, {LimbParams_init_default, LimbParams_init_default, LimbParams_init_default, LimbParams_init_default}}
#define RobotStatus_init_default                 {0, 0, 0, 0, 0, (RobotStatus_Mode)0}
#define RobotData_init_default                   {Imu_init_default, BatteryState_init_default, Joy_init_default, Twist_init_default, 0, 0, 0, RobotStatus_init_default, BehaviorCmd_init_default}
#define LimbCmd_init_default                     {0, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}}
#define LimbState_init_default                   {0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, 0, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}}
#define RobotCmd_init_default                    {0, {LimbCmd_init_default, LimbCmd_init_default, LimbCmd_init_default, LimbCmd_init_default}}
#define RobotState_init_default                  {0, {LimbState_init_default, LimbState_init_default, LimbState_init_default, LimbState_init_default}, 0, {0, 0, 0, 0, 0}}
#define Vector3_init_zero                        {0, 0, 0}
#define Quaternion_init_zero                     {0, 0, 0, 0}
#define Twist_init_zero                          {Vector3_init_zero, Vector3_init_zero}
#define Pose_init_zero                           {Vector3_init_zero, Quaternion_init_zero}
#define Imu_init_zero                            {Quaternion_init_zero, Vector3_init_zero, Vector3_init_zero, Vector3_init_zero, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 0}
#define JointState_init_zero                     {0, 0, 0, 0, 0, 0}
#define BatteryState_init_zero                   {0, 0, 0, 0}
#define Joy_init_zero                            {0, {0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define MotorModelParams_init_zero               {0, 0, 0, 0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define JointParams_init_zero                    {(JointParams_Type)0, 0, 0, 0, 0, (MotorType)0}
#define LimbParams_init_zero                     {(LimbParams_Type)0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, 0, {0, 0, 0, 0, 0, 0}, Vector3_init_zero}
#define BehaviorCmd_init_zero                    {0, Twist_init_zero, Pose_init_zero, 0}
#define BehaviorConfig_init_zero                 {0, 0, 0, 0, 0, 0}
#define HardwareConfig_init_zero                 {0, 0}
#define RobotParams_init_zero                    {(RobotParams_Type)0, 0, 0, 0, {JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero, JointParams_init_zero}, 0, {LimbParams_init_zero, LimbParams_init_zero, LimbParams_init_zero, LimbParams_init_zero}}
#define RobotStatus_init_zero                    {0, 0, 0, 0, 0, (RobotStatus_Mode)0}
#define RobotData_init_zero                      {Imu_init_zero, BatteryState_init_zero, Joy_init_zero, Twist_init_zero, 0, 0, 0, RobotStatus_init_zero, BehaviorCmd_init_zero}
#define LimbCmd_init_zero                        {0, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}}
#define LimbState_init_zero                      {0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, 0, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0}, 0, {0, 0, 0}, 0, {0, 0, 0}}
#define RobotCmd_init_zero                       {0, {LimbCmd_init_zero, LimbCmd_init_zero, LimbCmd_init_zero, LimbCmd_init_zero}}
#define RobotState_init_zero                     {0, {LimbState_init_zero, LimbState_init_zero, LimbState_init_zero, LimbState_init_zero}, 0, {0, 0, 0, 0, 0}}

/* Field tags (for use in manual encoding/decoding) */
#define BatteryState_voltage_tag                 1
#define BatteryState_current_tag                 2
#define BatteryState_percentage_tag              3
#define BatteryState_mvoltage_tag                4
#define BehaviorConfig_overTemperatureShutoff_tag 1
#define BehaviorConfig_softStart_tag             2
#define BehaviorConfig_fallRecovery_tag          3
#define BehaviorConfig_autopilot_tag             4
#define BehaviorConfig_selfCheck_tag             5
#define BehaviorConfig_negativePowerShutoff_tag  6
#define HardwareConfig_singleLegTest_tag         1
#define HardwareConfig_versionOverride_tag       2
#define JointParams_type_tag                     1
#define JointParams_address_tag                  2
#define JointParams_gearRatio_tag                3
#define JointParams_direction_tag                4
#define JointParams_zero_tag                     5
#define JointParams_motorType_tag                8
#define JointState_position_tag                  1
#define JointState_velocity_tag                  2
#define JointState_voltage_tag                   3
#define JointState_current_tag                   4
#define JointState_temperature_tag               5
#define JointState_torqueEst_tag                 6
#define Joy_axes_tag                             1
#define Joy_buttons_tag                          2
#define LimbCmd_mode_tag                         1
#define LimbCmd_feedforward_tag                  2
#define LimbCmd_kp_tag                           3
#define LimbCmd_kd_tag                           4
#define LimbState_q_tag                          1
#define LimbState_dq_tag                         2
#define LimbState_current_tag                    3
#define LimbState_temperature_tag                4
#define LimbState_torqueEst_tag                  5
#define LimbState_voltage_tag                    6
#define LimbState_torqueExt_tag                  7
#define LimbState_kneeAng_tag                    8
#define LimbState_dkneeAng_dkneeJoint_tag        9
#define LimbState_currentCmd_tag                 10
#define LimbState_position_tag                   11
#define LimbState_velocity_tag                   12
#define LimbState_Jac_tag                        13
#define LimbState_qraw_tag                       22
#define LimbState_status_tag                     31
#define MotorModelParams_kE_tag                  1
#define MotorModelParams_kT_tag                  2
#define MotorModelParams_kR_tag                  3
#define MotorModelParams_kJv_tag                 4
#define MotorModelParams_currents_tag            5
#define MotorModelParams_torques_tag             6
#define Quaternion_x_tag                         1
#define Quaternion_y_tag                         2
#define Quaternion_z_tag                         3
#define Quaternion_w_tag                         4
#define RobotStatus_imu_tag                      1
#define RobotStatus_updateARate_tag              2
#define RobotStatus_behaviorRate_tag             3
#define RobotStatus_updateATime_tag              4
#define RobotStatus_behaviorTime_tag             5
#define RobotStatus_mode_tag                     6
#define Vector3_x_tag                            1
#define Vector3_y_tag                            2
#define Vector3_z_tag                            3
#define Imu_orientation_tag                      1
#define Imu_angular_velocity_tag                 2
#define Imu_linear_acceleration_tag              3
#define Imu_euler_tag                            4
#define Imu_orientation_covariance_tag           5
#define Imu_linear_acceleration_covariance_tag   6
#define Imu_angular_velocity_covariance_tag      7
#define LimbParams_type_tag                      1
#define LimbParams_kinParams_tag                 2
#define LimbParams_fkFun_tag                     3
#define LimbParams_jointInd_tag                  4
#define LimbParams_d_tag                         5
#define Pose_position_tag                        1
#define Pose_orientation_tag                     2
#define RobotCmd_limbs_tag                       1
#define RobotState_limbs_tag                     1
#define RobotState_diagnostics_tag               2
#define Twist_linear_tag                         1
#define Twist_angular_tag                        2
#define BehaviorCmd_id_tag                       1
#define BehaviorCmd_twist_tag                    2
#define BehaviorCmd_pose_tag                     3
#define BehaviorCmd_mode_tag                     4
#define RobotParams_type_tag                     1
#define RobotParams_version_tag                  2
#define RobotParams_startupDelay_tag             3
#define RobotParams_joints_tag                   11
#define RobotParams_limbs_tag                    12
#define RobotData_imu_tag                        2
#define RobotData_batt_tag                       3
#define RobotData_joy_tag                        4
#define RobotData_twist_tag                      5
#define RobotData_behaviorId_tag                 8
#define RobotData_behaviorMode_tag               9
#define RobotData_millis_tag                     11
#define RobotData_status_tag                     12
#define RobotData_behaviorCmd_tag                21

/* Struct field encoding specification for nanopb */
extern const pb_field_t Vector3_fields[4];
extern const pb_field_t Quaternion_fields[5];
extern const pb_field_t Twist_fields[3];
extern const pb_field_t Pose_fields[3];
extern const pb_field_t Imu_fields[8];
extern const pb_field_t JointState_fields[7];
extern const pb_field_t BatteryState_fields[5];
extern const pb_field_t Joy_fields[3];
extern const pb_field_t MotorModelParams_fields[7];
extern const pb_field_t JointParams_fields[7];
extern const pb_field_t LimbParams_fields[6];
extern const pb_field_t BehaviorCmd_fields[5];
extern const pb_field_t BehaviorConfig_fields[7];
extern const pb_field_t HardwareConfig_fields[3];
extern const pb_field_t RobotParams_fields[6];
extern const pb_field_t RobotStatus_fields[7];
extern const pb_field_t RobotData_fields[10];
extern const pb_field_t LimbCmd_fields[5];
extern const pb_field_t LimbState_fields[16];
extern const pb_field_t RobotCmd_fields[2];
extern const pb_field_t RobotState_fields[3];

/* Maximum encoded size of messages (where known) */
#define Vector3_size                             15
#define Quaternion_size                          20
#define Twist_size                               34
#define Pose_size                                39
#define Imu_size                                 128
#define JointState_size                          30
#define BatteryState_size                        20
#define Joy_size                                 130
#define MotorModelParams_size                    120
#define JointParams_size                         31
#define LimbParams_size                          126
#define BehaviorCmd_size                         89
#define BehaviorConfig_size                      12
#define HardwareConfig_size                      8
#define RobotParams_size                         1186
#define RobotStatus_size                         30
#define RobotData_size                           464
#define LimbCmd_size                             51
#define LimbState_size                           244
#define RobotCmd_size                            212
#define RobotState_size                          1013

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SIMPLE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
